# Configure next GitHub Action secrets:
# -- AZURE_CLIENT_ID:       application identity Id
# -- AZURE_CLIENT_SECRET:   application identity password
# -- AZURE_TENANT_ID:       application identity tenant
# -- AZURE_STORAGE_KEY:     blob storage key
# -- AZURE_STORAGE_ACCOUNT  blob storage account name
# -- AZURE_STORAGE_NAME     blob storage directory
# -- AZURE_FUNCTION_URL     function app url

# Configure next csproj variables
# -- AssemblyFileVersion:   represents app version. 
#                           should change only major/ninor version
#                           patch is autoincremented
# -- AssemblyTitle:         application displayed name for users
# -- AssemblyProduct        application working name
#                           should match PTG_PRODUCTION_APP_NAME

name: Build and Deploy to Azure Blob 

env:
  PTG_PRODUCTION_APP_NAME: _
 
on:
  push:
    branches:
      - main
      - master
      - development
      - develop

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
        dotnet-version: '8.x' # or '7.x', '6.x', etc.

      - name: Restore dependencies
        run: dotnet restore "$env:PTG_PRODUCTION_APP_NAME.sln"

      - name: Build Solution
        run: dotnet build "$env:PTG_PRODUCTION_APP_NAME.sln" --configuration Release --no-restore

      # Clean non dll and exe files

      # fix metadata fetch from appsettings file
      - name: Get Application Metadata
        run: |
          $file = "$env:PTG_PRODUCTION_APP_NAME/Properties/AssemblyInfo.cs"

          $versionMatch = Select-String -Path $file -Pattern 'AssemblyFileVersion\("(\d+\.\d+\.\d+\.\d+)"\)'
          $titleMatch = Select-String -Path $file -Pattern 'AssemblyTitle\("(.+?)"\)'
          $productMatch = Select-String -Path $file -Pattern 'AssemblyProduct\("(.+?)"\)'

          if ($versionMatch.Matches.Count -gt 0) {
            $version = $versionMatch.Matches[0].Groups[1].Value
            echo "APP_VERSION=$version" >> $env:GITHUB_ENV
          } else {
            echo "Error: Version not found!"
            exit 1
          }

          if ($titleMatch.Matches.Count -gt 0) {
            $title = $titleMatch.Matches[0].Groups[1].Value
            echo "APP_TITLE=$title" >> $env:GITHUB_ENV
          } else {
            echo "Error: Title not found!"
            exit 1
          }

          if ($productMatch.Matches.Count -gt 0) {
            $product = $productMatch.Matches[0].Groups[1].Value
            echo "APP_PRODUCT=$product" >> $env:GITHUB_ENV
          } else {
            echo "Error: Product not found!"
            exit 1
          }
        shell: pwsh

      - name: Get Repository URL & Commit Message
        run: |
          echo "REPO_URL=${{ github.server_url }}/${{ github.repository }}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV
        shell: bash
      
      - name: Azure Login
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        shell: pwsh
      
      - name: Upload to Azure Storage
        run: |
            $folderName = "$env:PTG_PRODUCTION_APP_NAME-$(New-Guid)"        
            $result = az storage blob upload-batch `
                --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} `
                --account-key ${{ secrets.AZURE_STORAGE_KEY }} `
                --destination ${{ secrets.AZURE_STORAGE_NAME }}/$folderName `
                --source $env:PTG_PRODUCTION_APP_NAME/bin/Release # change to ./publish
            $blobUrl = "https://${{ secrets.AZURE_STORAGE_ACCOUNT }}.blob.core.windows.net/${{ secrets.AZURE_STORAGE_NAME }}/$folderName"
            echo "BLOB_URL=$blobUrl" >>  $env:GITHUB_ENV
            Write-Host "Upload Result: $result"
            Write-Host "Uploaded to folder: $folderName"
            Write-Host "BLOB_URL=$blobUrl"
        shell: pwsh

      - name: Call Azure Function
        run: |
            $payload = @{
                ApplicationBuildProductionName = "${{ env.APP_PRODUCT }}"
                ApplicationBuildUserName = "${{ env.APP_TITLE }}"
                ApplicationBuildBlobPath = "${{ env.BLOB_URL }}"
                Version = "${{ env.APP_VERSION }}"
                RepositoryUrl = "${{ env.REPO_URL }}"
                ChangeLog = "${{ env.COMMIT_MESSAGE }}"
            } | ConvertTo-Json -Depth 3

            $response = Invoke-RestMethod -Uri ${{ secrets.AZURE_FUNCTION_URL }} -Method Post -Body $payload
            Write-Host "Response from Azure Function: $($response)"        
        shell: pwsh